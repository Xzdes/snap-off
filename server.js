// –§–∞–π–ª: server.js (–§–ò–ù–ê–õ–¨–ù–ê–Ø –í–ï–†–°–ò–Ø - –ü–û–ë–ï–î–ê)

import express from 'express';
import session from 'express-session';
import http from 'http';
import path from 'path';
import { fileURLToPath } from 'url';
import { createSnapOff, createSnapOffSocketServer } from './src/snap-off-core/index.js';

// --- 0. –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);
const PORT = 3000;
const app = express();
const server = http.createServer(app);

// --- 1. Middleware ---
app.use(express.static(path.join(__dirname, 'public')));
app.use(express.json());
app.use(express.urlencoded({ extended: true }));
app.use(session({
  secret: 'a-very-strong-and-secret-key-for-session-change-it',
  resave: false,
  saveUninitialized: true,
  cookie: { secure: false }
}));

// --- 2. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Snap-Off ---
const snap = createSnapOff({ componentsPath: './src/components' });
const snapSockets = createSnapOffSocketServer({ server });

// --- 3. –†–æ—É—Ç—ã ---
app.post('/_snap/event/:instanceId/:eventName', snap.middleware);

app.get('/', async (req, res) => {
  const counterHtml = await snap.render('counter', { initialValue: 10 }, req);
  res.send(`
    <!DOCTYPE html>
    <html lang="ru">
    <head>
      <meta charset="UTF-8">
      <title>Snap-Off: –ü–û–ë–ï–î–ê!</title>
      <script src="/htmx.min.js"></script>
      <script src="/ws.js"></script>
      <style>
        body { font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", sans-serif; padding: 2em; }
        .success-box { background-color: #28a745; color: white; border: 1px solid #1e7e34; padding: 1rem; margin-top: 1rem; border-radius: 0.25rem; text-align: center; font-size: 1.2rem; }
        button { font-size: 1rem; padding: 0.5em 1em; cursor: pointer; }
      </style>
    </head>
    <body hx-ext="ws" ws-connect="/_snap/ws">
      <h1>‚úÖ Snap-Off: –°–∏—Å—Ç–µ–º–∞ –†–∞–±–æ—Ç–∞–µ—Ç</h1>
      ${counterHtml}
      <hr style="margin: 2em 0;">
      <h2>–¢–µ—Å—Ç WebSocket:</h2>
      
      <!-- –≠—Ç–æ—Ç div –ø—Ä–æ—Å—Ç–æ –∂–¥–µ—Ç, —á—Ç–æ–±—ã –µ–≥–æ –∑–∞–º–µ–Ω–∏–ª–∏ -->
      <div id="server-messages" ws-swap="message" style="min-height: 60px;">
         –û–∂–∏–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞...
      </div>
      
      <button onclick="fetch('/broadcast-time', { method: 'POST' })" style="margin-top: 1rem;">Broadcast Time</button>
    </body>
    </html>
  `);
});

// –¢–µ—Å—Ç–æ–≤—ã–π —Ä–æ—É—Ç, –∫–æ—Ç–æ—Ä—ã–π –∏–Ω–∏—Ü–∏–∏—Ä—É–µ—Ç WebSocket-—Å–æ–±—ã—Ç–∏–µ
app.post('/broadcast-time', (req, res) => {
    console.log('[server] POST /broadcast-time: –§–æ—Ä–º–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º HTML –ø–æ WebSocket...');
    
    // !!! –í–û–¢ –û–ù–û, –†–ï–®–ï–ù–ò–ï !!!
    // –ú—ã —Å–æ–∑–¥–∞–µ–º HTML, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞–ø—Ä—è–º—É—é.
    const htmlMessage = `
        <div id="server-messages" ws-swap="message" class="success-box">
            <strong>–ü–û–ë–ï–î–ê!</strong> –û—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –ø–æ–ª—É—á–µ–Ω –≤: <strong>${new Date().toLocaleTimeString()}</strong>
        </div>
    `;
    
    // –ò –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ: { html: '...' }
    snapSockets.broadcast({ html: htmlMessage });
    
    res.status(200).send('Event broadcasted!');
});

// --- 4. –ó–∞–ø—É—Å–∫ –°–µ—Ä–≤–µ—Ä–∞ ---
server.listen(PORT, () => {
    console.log('------------------------------------------');
    console.log(`üöÄ –°–µ—Ä–≤–µ—Ä Snap-Off –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç!`);
    console.log(`‚úÖ –û—Ç–∫—Ä–æ–π—Ç–µ –≤ –±—Ä–∞—É–∑–µ—Ä–µ: http://localhost:${PORT}`);
    console.log('------------------------------------------');
});